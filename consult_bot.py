import telebot
from datetime import datetime
from telebot import types
from connetion import connection

info_client_dict = {}
month = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å']
bot = telebot.TeleBot('5408757344:AAFGtHco9x9xdezFeadsV6aGe7rPAjijRqg')


def phone_number(x):
    s = str(x)
    phone = ''
    for i in s:
        if i.isdigit():
            phone += i
    phone = phone[-10:]
    return phone


def insert_info(a, b, c, d, e):
    with connection.cursor() as cursor:
        add_info = f"INSERT INTO client_base (pid, name, phone, date, app) VALUES ({a}, '" + b +"', '" + c + "', '" + d +"', '" + e +"')"
        cursor.execute(add_info)
        connection.commit()


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton(text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", url='https://t.me/bublik_c_chaem')
    markup.add(btn)
    bot.send_message(message.chat.id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}! –Ø –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å –í–∞–º –¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –∫–ª–∏–µ–Ω—Ç–∞–º, —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Å –í–∞–º–∏! –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–Ω —Å–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–º–æ—á—å!",reply_markup=markup)
    mes = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    bot.register_next_step_handler(mes, init)


def init(message):
    phone = str(message.text)
    phone = phone_number(phone)
    if len(phone) < 10:
        mes = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ù–∞–ø—Ä–∏–º–µ—Ä: 8-(777)-777-77-77')
        bot.register_next_step_handler(mes, init)
    else:
        with connection.cursor() as cursor:
            check_info = cursor.execute("SELECT * FROM client_base WHERE phone= '" + phone + "'")
            if check_info == 0:
                markup = types.InlineKeyboardMarkup()
                btn = types.InlineKeyboardButton(text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", url='https://t.me/bublik_c_chaem')
                markup.add(btn)
                bot.send_message(message.chat.id, '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ', reply_markup=markup)
            elif check_info == 1:
                user_id = str(message.chat.id)
                with connection.cursor() as cursor:
                    check_info = "UPDATE client_base SET chat_id= '" + user_id + "' WHERE phone = '" + phone + "'"
                    cursor.execute(check_info)
                    connection.commit()
                menu(message)
            else:
                markup = types.InlineKeyboardMarkup()
                btn = types.InlineKeyboardButton(text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", url='https://t.me/bublik_c_chaem')
                markup.add(btn)
                bot.send_message(message.chat.id, '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.', reply_markup=markup)


def menu(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üìï–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é –±–∞–∑—É')
    btn2 = types.KeyboardButton('‚úè–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞')
    btn3 = types.KeyboardButton('‚úâ–†–∞—Å—Å—ã–ª–∫–∞')
    markup.add(btn2, btn3, btn1)
    mes = bot.send_message(message.chat.id, '–≠—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–µ–π—á–∞—Å?', reply_markup=markup)
    bot.register_next_step_handler(mes, answer_client)


@bot.message_handler(content_types=['text'])
def answer_client(message):
    if message.text == '‚úè–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞' or message.text == '–î–∞' or message.text == '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ':
        a = types.ReplyKeyboardRemove()
        mes = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞', reply_markup=a)
        bot.register_next_step_handler(mes, name_client)
    elif message.text == '–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ':
        menu(message)
    elif message.text == 'üìï–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é –±–∞–∑—É':
        user_id = str(message.chat.id)
        with connection.cursor() as cursor:
            cursor.execute(f"SELECT id FROM client_base WHERE chat_id = {user_id}")
            row = cursor.fetchone()
            id = row.get('id')
        with connection.cursor() as cursor:
            cursor.execute(f"SELECT * FROM client_base WHERE pid = {id} and deleted_at is null")
            base = cursor.fetchall()
            info = []
            for i in range(len(base)):
                line = base[i]
                num = str(i + 1)
                name_cl = line.get('name')
                phone_cl = '+7' + line.get('phone')
                date_cl = str(line.get('date')).split()
                date_ymd = date_cl[0].split('-')
                date_m = date_ymd[1]
                date_d = date_ymd[2]
                info.append(num + ') ' + name_cl + '  –î/—Ä (–¥–µ–Ω—å.–º–µ—Å—è—Ü):  ' + date_d + '.' + date_m + '\n'
                            '–¢–µ–ª.:  ' + phone_cl)
            bot.send_message(message.chat.id, '\n'.join(info))
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            btn1 = types.KeyboardButton('–í—Å–µ –≤–µ—Ä–Ω–æ')
            btn2 = types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã')
            markup.add(btn1, btn2)
            mes = bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é –±–∞–∑—É', reply_markup=markup)
            bot.register_next_step_handler(mes, answer_base)
            info.clear()
    elif message.text == '‚úâ–†–∞—Å—Å—ã–ª–∫–∞':
        markup = types.InlineKeyboardMarkup()
        btn = types.InlineKeyboardButton(text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", url='https://t.me/bublik_c_chaem')
        markup.add(btn)
        bot.send_message(message.chat.id, '–†–∞—Å—Å—ã–ª–∫–∞ - —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞–º –±–æ—Ç. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: "–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ, (–∏–º—è –∫–ª–∏–µ–Ω—Ç–∞)!". \n'
                                          '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–ª–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É', reply_markup=markup)
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        btn = types.KeyboardButton('–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º')
        btn1 = types.KeyboardButton('–†–∞—Å—Å—ã–ª–∫–∞ –∫–æ –¥–Ω—é —Ä–æ–∂–¥–µ–Ω–∏—è')
        markup.add(btn, btn1)
        mes = bot.send_message(message.chat.id, '–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å?', reply_markup=markup)
        bot.register_next_step_handler(mes, answer_sender)


def answer_base(message):
    if message.text == '–í—Å–µ –≤–µ—Ä–Ω–æ':
        menu(message)
    elif message.text == '–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã':
        a = types.ReplyKeyboardRemove()
        mes = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å', reply_markup=a)
        bot.register_next_step_handler(mes, delete)


def delete(message):
    phone = phone_number(message.text)
    delete_date = str(datetime.now()).split()
    delete_date = delete_date[0]
    with connection.cursor() as cursor:
        cursor.execute("UPDATE client_base SET deleted_at = '" + delete_date + "' WHERE phone = '" + phone + "'")
        connection.commit()
    bot.send_message(message.chat.id, '–ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω')
    menu(message)


def name_client(message):
    user_id = str(message.chat.id)
    info_client_dict.setdefault(user_id, [])
    name = str(message.text)
    info_client_dict[user_id].append(name)
    mes = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞')
    bot.register_next_step_handler(mes, phone_client)


def phone_client(message):
    user_id = str(message.chat.id)
    phone = phone_number(str(message.text))
    if len(phone) < 10:
        mes = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: 8-(777)-777-77-77')
        bot.register_next_step_handler(mes, phone_client)
    else:
        info_client_dict[user_id].append(phone)
        date_client_month(message)


def date_client_month(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    jan = types.KeyboardButton('–Ø–Ω–≤–∞—Ä—å')
    feb = types.KeyboardButton('–§–µ–≤—Ä–∞–ª—å')
    mar = types.KeyboardButton('–ú–∞—Ä—Ç')
    apr = types.KeyboardButton('–ê–ø—Ä–µ–ª—å')
    may = types.KeyboardButton('–ú–∞–π')
    june = types.KeyboardButton('–ò—é–Ω—å')
    july = types.KeyboardButton('–ò—é–ª—å')
    aug = types.KeyboardButton('–ê–≤–≥—É—Å—Ç')
    sep = types.KeyboardButton('–°–µ–Ω—Ç—è–±—Ä—å')
    october = types.KeyboardButton('–û–∫—Ç—è–±—Ä—å')
    nov = types.KeyboardButton('–ù–æ—è–±—Ä—å')
    dec = types.KeyboardButton('–î–µ–∫–∞–±—Ä—å')
    markup.add(jan,feb,mar,apr,may,june,july,aug,sep,october,nov,dec)
    mes = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü —Ä–æ–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ', reply_markup=markup)
    bot.register_next_step_handler(mes, date_month_answer)


def date_month_answer(message):
    user_id = str(message.chat.id)
    for i in range(len(month)):
        if message.text == month[i]:
            m = str(i + 1)
            if len(m) < 2:
                m = '0' + m
                info_client_dict[user_id].append(m)
            else:
                info_client_dict[user_id].append(m)
    mes = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞')
    bot.register_next_step_handler(mes,date_birth)


def date_birth(message):
    user_id = str(message.chat.id)
    date = message.text
    if len(date) < 2:
        date = '0' + date
        info_client_dict[user_id].append(date)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        tlg = types.KeyboardButton('–¢–µ–ª–µ–≥—Ä–∞–º')
        wa = types.KeyboardButton('WhatsApp')
        markup.add(tlg, wa)
        mes = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ,–≤ –∫–∞–∫–æ–º –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ –∫–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', reply_markup=markup)
        bot.register_next_step_handler(mes, app_client)
    elif len(date) > 2:
        mes = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É')
        bot.register_next_step_handler(mes, date_birth)
    else:
        info_client_dict[user_id].append(date)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        tlg = types.KeyboardButton('–¢–µ–ª–µ–≥—Ä–∞–º')
        wa = types.KeyboardButton('WhatsApp')
        markup.add(tlg, wa)
        mes = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ,–≤ –∫–∞–∫–æ–º –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ –∫–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É',
                               reply_markup=markup)
        bot.register_next_step_handler(mes, app_client)


def app_client(message):
    user_id = str(message.chat.id)
    if message.text == '–¢–µ–ª–µ–≥—Ä–∞–º':
        app = 'tlg'
        info_client_dict[user_id].append(app)
        check(message)
    elif message.text == 'WhatsApp':
        app = 'wa'
        info_client_dict[user_id].append(app)
        check(message)


def check(message):
    user_id = str(message.chat.id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn = types.KeyboardButton('–í—Å–µ –≤–µ—Ä–Ω–æ')
    btn2 = types.KeyboardButton('–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ')
    markup.add(btn, btn2)
    mes = bot.send_message(message.chat.id, f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∏–µ–Ω—Ç–µ: \n"
                                      f'–ò–º—è: {info_client_dict.get(user_id).__getitem__(0)} \n'
                                      f'–¢–µ–ª–µ—Ñ–æ–Ω: +7{info_client_dict.get(user_id).__getitem__(1)} \n'
                                      f'–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {info_client_dict.get(user_id).__getitem__(3) + "." + info_client_dict.get(user_id).__getitem__(2)}', reply_markup=markup)
    bot.register_next_step_handler(mes, final_answer)


def final_answer(message):
    user_id = str(message.chat.id)
    if message.text == '–í—Å–µ –≤–µ—Ä–Ω–æ':
        with connection.cursor() as cursor:
            cursor.execute(f"SELECT id FROM client_base WHERE chat_id = {user_id}")
            row = cursor.fetchone()
            pid = row.get('id')
        name_f = info_client_dict.get(user_id).__getitem__(0)
        phone_f = info_client_dict.get(user_id).__getitem__(1)
        date = '1980.' + info_client_dict.get(user_id).__getitem__(2) + "." + info_client_dict.get(user_id).__getitem__(3)
        app = info_client_dict.get(user_id).__getitem__(4)
        insert_info(pid, name_f, phone_f, date, app)
        info_client_dict.pop(user_id)
        bot.send_message(message.chat.id, '–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É')
        reset_info(message)
    elif message.text == '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ':
        info_client_dict.pop(user_id)
        answer_client(message)


def reset_info(message):
    if message.text == '–í—Å–µ –≤–µ—Ä–Ω–æ':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        btn1 = types.KeyboardButton('–î–∞')
        btn2 = types.KeyboardButton('–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ')
        markup.add(btn1, btn2)
        mes = bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞?', reply_markup=markup)
        bot.register_next_step_handler(mes, answer_client)


def answer_sender(message):
    if message.text == '–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º':
        mes = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. –£—á—Ç–∏—Ç–µ, —á—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')
        bot.register_next_step_handler(mes, message_saver)
    elif message.text == '–†–∞—Å—Å—ã–ª–∫–∞ –∫ –¥/—Ä':
        bot.send_message(message.chat.id, '–†–∞—Å—Å—ã–ª–∫–∞ –∫–æ –¥–Ω—é —Ä–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–∞ 3 –¥–Ω—è –¥–æ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞. –¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞—à–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º –∫–∞–∫ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –∫–∞–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–æ –¥–Ω—é —Ä–æ–∂–¥–µ–Ω–∏—è.')
        mes = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. –£—á—Ç–∏—Ç–µ, —á—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')
        bot.register_next_step_handler(mes, birth_mess_saver)


def birth_mess_saver(message):
    mess = str(message.text)
    user_id = str(message.chat.id)
    with connection.cursor() as cursor:
        cursor.execute(f"UPDATE client_base SET send_birth = '{mess}' WHERE chat_id = {user_id}")
        connection.commit()
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    btn = types.KeyboardButton('–û—Ç–ª–∏—á–Ω–æ')
    btn1 = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å')
    markup.add(btn, btn1)
    bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –∏–º–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–∏–¥: \n'
                                      f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, (–∏–º—è –∫–ª–∏–µ–Ω—Ç–∞)! {mess}')
    mes = bot.send_message(message.chat.id, '–ö–∞–∫ –≤–∞–º?', reply_markup=markup)
    bot.register_next_step_handler(mes, answer_birth)


def answer_birth(message):
    if message.text == '–û—Ç–ª–∏—á–Ω–æ':
        bot.send_message(message.chat.id, '–Ø –æ—Ç–ø—Ä–∞–≤–ª—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞—à–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞. –°–ø–∞—Å–∏–±–æ!')
        menu(message)
    elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å':
        mes = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        bot.register_next_step_handler(mes, birth_mess_saver)
    else:
        markup = types.InlineKeyboardMarkup()
        btn = types.InlineKeyboardButton(text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", url='https://t.me/bublik_c_chaem')
        markup.add(btn)
        bot.send_message(message.chat.id, '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.', reply_markup=markup)


def message_saver(message):
    user_id = str(message.chat.id)
    mess = str(message.text)
    with connection.cursor() as cursor:
        cursor.execute(f"UPDATE client_base SET send_all = '{mess}' WHERE chat_id = {user_id}")
        connection.commit()
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    btn = types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å')
    btn1 = types.KeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å –∑–∞–Ω–æ–≤–æ')
    markup.add(btn, btn1)
    bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –∏–º–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–∏–¥: \n'
                                            f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, (–∏–º—è –∫–ª–∏–µ–Ω—Ç–∞)! {mess}' )
    mes = bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º?', reply_markup=markup)
    bot.register_next_step_handler(mes, answerr)


def answerr(message):
    user_id = str(message.chat.id)
    if message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å':
        sender_bot = telebot.TeleBot('5296562344:AAFRkKZdWqM8untSCYqyHjppB1bHsL9aNKM')
        with connection.cursor() as cursor:
            cursor.execute(f"SELECT send_all FROM client_base WHERE chat_id = {user_id}")
            mess = cursor.fetchone()
            mess = mess.get('send_all')
            cursor.execute(f"SELECT id FROM client_base WHERE chat_id = {user_id}")
            id_sender = cursor.fetchone()
            id_sender = id_sender.get('id')
            cursor.execute(f"SELECT * FROM client_base WHERE pid = {id_sender} and deleted_at is null and chat_id is not null")
            adres = cursor.fetchall()
            for chat in adres:
                name_cli = chat.get('name')
                id_chat = chat.get('chat_id')
                sender_bot.send_message(id_chat, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ' + name_cli + '! ' + mess)
            bot.send_message(message.chat.id, '–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
            menu(message)
    elif message.text == '–ù–∞–ø–∏—Å–∞—Ç—å –∑–∞–Ω–æ–≤–æ':
        mes = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        bot.register_next_step_handler(mes, message_saver)


bot.polling(non_stop=True)